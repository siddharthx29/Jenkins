pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = 'dockerhub-creds'  // Jenkins Docker Hub creds
        DOCKERHUB_USER = 'siddharrrth'
        FRONTEND_IMAGE = "${DOCKERHUB_USER}/flask-frontend:latest"
        BACKEND_IMAGE = "${DOCKERHUB_USER}/express-backend:latest"
        AWS_CREDENTIALS = 'aws-cred'   // Jenkins AWS creds
        AWS_REGION = 'us-east-1'       // replace with your EKS region
        EKS_CLUSTER = 'my-eks-cluster' // replace with your EKS cluster name
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Configure AWS & kubectl') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: "${AWS_CREDENTIALS}"]]) {
                    sh '''
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                        aws configure set default.region ${AWS_REGION}
                        aws eks update-kubeconfig --name ${EKS_CLUSTER} --region ${AWS_REGION}
                    '''
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    docker.build("flask-frontend:latest", "./frontend")
                    docker.build("express-backend:latest", "./backend")
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS}", usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh "echo $PASSWORD | docker login -u $USERNAME --password-stdin"
                        sh "docker tag flask-frontend:latest ${FRONTEND_IMAGE}"
                        sh "docker tag express-backend:latest ${BACKEND_IMAGE}"
                        sh "docker push ${FRONTEND_IMAGE}"
                        sh "docker push ${BACKEND_IMAGE}"
                    }
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                sh "kubectl apply -f k8s/"
            }
        }

        stage('Verify Deployment') {
            steps {
                sh "kubectl get pods"
                sh "kubectl get svc"
                sh "kubectl get ingress"
            }
        }
    }

    post {
        success {
            echo "✅ Deployment Successful!"
        }
        failure {
            echo "❌ Deployment Failed!"
        }
    }
}

